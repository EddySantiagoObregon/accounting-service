# Script de inicio r√°pido para Microservicios de Banca
# Autor: Prueba T√©cnica
# Descripci√≥n: Inicia todos los servicios necesarios

Write-Host "üöÄ Iniciando Microservicios de Banca..." -ForegroundColor Green
Write-Host "========================================" -ForegroundColor Green

# Verificar si Docker est√° ejecut√°ndose
try {
    docker info | Out-Null
    Write-Host "‚úÖ Docker est√° ejecut√°ndose" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Error: Docker no est√° ejecut√°ndose. Por favor, inicia Docker Desktop." -ForegroundColor Red
    exit 1
}

# Verificar si Docker Compose est√° disponible
try {
    docker-compose --version | Out-Null
    Write-Host "‚úÖ Docker Compose est√° disponible" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Error: Docker Compose no est√° instalado." -ForegroundColor Red
    exit 1
}

# Detener contenedores existentes
Write-Host "üõë Deteniendo contenedores existentes..." -ForegroundColor Yellow
docker-compose down

# Construir y levantar los servicios
Write-Host "üî® Construyendo y levantando servicios..." -ForegroundColor Yellow
docker-compose up --build -d

# Esperar a que los servicios est√©n listos
Write-Host "‚è≥ Esperando a que los servicios est√©n listos..." -ForegroundColor Yellow
Start-Sleep -Seconds 30

# Verificar el estado de los servicios
Write-Host "üîç Verificando estado de los servicios..." -ForegroundColor Yellow
docker-compose ps

# Verificar health checks
Write-Host "üè• Verificando health checks..." -ForegroundColor Yellow

# Customer Service
Write-Host "Verificando Customer Service..." -ForegroundColor Cyan
try {
    $response = Invoke-WebRequest -Uri "http://localhost:8081/actuator/health" -TimeoutSec 5
    if ($response.StatusCode -eq 200) {
        Write-Host "‚úÖ Customer Service est√° funcionando (Puerto 8081)" -ForegroundColor Green
    }
} catch {
    Write-Host "‚ùå Customer Service no est√° respondiendo" -ForegroundColor Red
}

# Accounting Service
Write-Host "Verificando Accounting Service..." -ForegroundColor Cyan
try {
    $response = Invoke-WebRequest -Uri "http://localhost:8082/actuator/health" -TimeoutSec 5
    if ($response.StatusCode -eq 200) {
        Write-Host "‚úÖ Accounting Service est√° funcionando (Puerto 8082)" -ForegroundColor Green
    }
} catch {
    Write-Host "‚ùå Accounting Service no est√° respondiendo" -ForegroundColor Red
}

Write-Host ""
Write-Host "üéâ ¬°Microservicios iniciados exitosamente!" -ForegroundColor Green
Write-Host ""
Write-Host "üìã Servicios disponibles:" -ForegroundColor Cyan
Write-Host "   ‚Ä¢ Customer Service: http://localhost:8081" -ForegroundColor White
Write-Host "   ‚Ä¢ Accounting Service: http://localhost:8082" -ForegroundColor White
Write-Host "   ‚Ä¢ MySQL: localhost:3306" -ForegroundColor White
Write-Host "   ‚Ä¢ Kafka: localhost:9092" -ForegroundColor White
Write-Host ""
Write-Host "üìö Documentaci√≥n:" -ForegroundColor Cyan
Write-Host "   ‚Ä¢ README.md - Instrucciones completas" -ForegroundColor White
Write-Host "   ‚Ä¢ Microservicios_Banca.postman_collection.json - Colecci√≥n de Postman" -ForegroundColor White
Write-Host "   ‚Ä¢ BaseDatos.sql - Script de base de datos" -ForegroundColor White
Write-Host ""
Write-Host "üîß Comandos √∫tiles:" -ForegroundColor Cyan
Write-Host "   ‚Ä¢ Ver logs: docker-compose logs -f" -ForegroundColor White
Write-Host "   ‚Ä¢ Detener servicios: docker-compose down" -ForegroundColor White
Write-Host "   ‚Ä¢ Reiniciar: docker-compose restart" -ForegroundColor White
Write-Host ""
Write-Host "‚ú® ¬°Listo para usar!" -ForegroundColor Green
